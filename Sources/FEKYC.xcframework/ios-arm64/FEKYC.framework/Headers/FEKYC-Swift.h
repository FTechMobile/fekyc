#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
#ifndef FEKYC_SWIFT_H
#define FEKYC_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="FEKYC",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@class NSString;
@class NSCoder;

SWIFT_CLASS("_TtC5FEKYC12EKYCAPIError")
@interface EKYCAPIError : NSError
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC5FEKYC14EKYCHTTPClient")
@interface EKYCHTTPClient : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// This is a list of Hypertext Transfer Protocol (HTTP) response status codes.
/// It includes codes from IETF internet standards, other IETF RFCs, other specifications, and some additional commonly used codes.
/// The first digit of the status code specifies one of five classes of response; an HTTP client must recognise these five classes at a minimum.
typedef SWIFT_ENUM(NSInteger, EKYCHTTPStatusCode, open) {
/// <ul>
///   <li>
///     continue: The server has received the request headers and the client should proceed to send the request body.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeContinue = 100,
/// <ul>
///   <li>
///     switchingProtocols: The requester has asked the server to switch protocols and the server has agreed to do so.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeSwitchingProtocols = 101,
/// <ul>
///   <li>
///     processing: This code indicates that the server has received and is processing the request, but no response is available yet.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeProcessing = 102,
/// <ul>
///   <li>
///     ok: Standard response for successful HTTP requests.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeOk = 200,
/// <ul>
///   <li>
///     created: The request has been fulfilled, resulting in the creation of a new resource.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeCreated = 201,
/// <ul>
///   <li>
///     accepted: The request has been accepted for processing, but the processing has not been completed.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeAccepted = 202,
/// <ul>
///   <li>
///     nonAuthoritativeInformation: The server is a transforming proxy (e.g. a Web accelerator) that received a 200 OK from its origin, but is returning a modified version of the origin’s response.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeNonAuthoritativeInformation = 203,
/// <ul>
///   <li>
///     noContent: The server successfully processed the request and is not returning any content.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeNoContent = 204,
/// <ul>
///   <li>
///     resetContent: The server successfully processed the request, but is not returning any content.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeResetContent = 205,
/// <ul>
///   <li>
///     partialContent: The server is delivering only part of the resource (byte serving) due to a range header sent by the client.
///   </li>
/// </ul>
  EKYCHTTPStatusCodePartialContent = 206,
/// <ul>
///   <li>
///     multiStatus: The message body that follows is an XML message and can contain a number of separate response codes, depending on how many sub-requests were made.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeMultiStatus = 207,
/// <ul>
///   <li>
///     alreadyReported: The members of a DAV binding have already been enumerated in a previous reply to this request, and are not being included again.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeAlreadyReported = 208,
/// <ul>
///   <li>
///     IMUsed: The server has fulfilled a request for the resource, and the response is a representation of the result of one or more instance-manipulations applied to the current instance.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeIMUsed = 226,
/// <ul>
///   <li>
///     multipleChoices: Indicates multiple options for the resource from which the client may choose
///   </li>
/// </ul>
  EKYCHTTPStatusCodeMultipleChoices = 300,
/// <ul>
///   <li>
///     movedPermanently: This and all future requests should be directed to the given URI.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeMovedPermanently = 301,
/// <ul>
///   <li>
///     found: The resource was found.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeFound = 302,
/// <ul>
///   <li>
///     seeOther: The response to the request can be found under another URI using a GET method.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeSeeOther = 303,
/// <ul>
///   <li>
///     notModified: Indicates that the resource has not been modified since the version specified by the request headers If-Modified-Since or If-None-Match.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeNotModified = 304,
/// <ul>
///   <li>
///     useProxy: The requested resource is available only through a proxy, the address for which is provided in the response.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeUseProxy = 305,
/// <ul>
///   <li>
///     switchProxy: No longer used. Originally meant “Subsequent requests should use the specified proxy.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeSwitchProxy = 306,
/// <ul>
///   <li>
///     temporaryRedirect: The request should be repeated with another URI.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeTemporaryRedirect = 307,
/// <ul>
///   <li>
///     permenantRedirect: The request and all future requests should be repeated using another URI.
///   </li>
/// </ul>
  EKYCHTTPStatusCodePermenantRedirect = 308,
/// <ul>
///   <li>
///     badRequest: The server cannot or will not process the request due to an apparent client error.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeBadRequest = 400,
/// <ul>
///   <li>
///     unauthorized: Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet been provided.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeUnauthorized = 401,
/// <ul>
///   <li>
///     paymentRequired: The content available on the server requires payment.
///   </li>
/// </ul>
  EKYCHTTPStatusCodePaymentRequired = 402,
/// <ul>
///   <li>
///     forbidden: The request was a valid request, but the server is refusing to respond to it.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeForbidden = 403,
/// <ul>
///   <li>
///     notFound: The requested resource could not be found but may be available in the future.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeNotFound = 404,
/// <ul>
///   <li>
///     methodNotAllowed: A request method is not supported for the requested resource. e.g. a GET request on a form which requires data to be presented via POST
///   </li>
/// </ul>
  EKYCHTTPStatusCodeMethodNotAllowed = 405,
/// <ul>
///   <li>
///     notAcceptable: The requested resource is capable of generating only content not acceptable according to the Accept headers sent in the request.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeNotAcceptable = 406,
/// <ul>
///   <li>
///     proxyAuthenticationRequired: The client must first authenticate itself with the proxy.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeProxyAuthenticationRequired = 407,
/// <ul>
///   <li>
///     requestTimeout: The server timed out waiting for the request.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeRequestTimeout = 408,
/// <ul>
///   <li>
///     conflict: Indicates that the request could not be processed because of conflict in the request, such as an edit conflict between multiple simultaneous updates.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeConflict = 409,
/// <ul>
///   <li>
///     gone: Indicates that the resource requested is no longer available and will not be available again.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeGone = 410,
/// <ul>
///   <li>
///     lengthRequired: The request did not specify the length of its content, which is required by the requested resource.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeLengthRequired = 411,
/// <ul>
///   <li>
///     preconditionFailed: The server does not meet one of the preconditions that the requester put on the request.
///   </li>
/// </ul>
  EKYCHTTPStatusCodePreconditionFailed = 412,
/// <ul>
///   <li>
///     payloadTooLarge: The request is larger than the server is willing or able to process.
///   </li>
/// </ul>
  EKYCHTTPStatusCodePayloadTooLarge = 413,
/// <ul>
///   <li>
///     URITooLong: The URI provided was too long for the server to process.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeURITooLong = 414,
/// <ul>
///   <li>
///     unsupportedMediaType: The request entity has a media type which the server or resource does not support.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeUnsupportedMediaType = 415,
/// <ul>
///   <li>
///     rangeNotSatisfiable: The client has asked for a portion of the file (byte serving), but the server cannot supply that portion.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeRangeNotSatisfiable = 416,
/// <ul>
///   <li>
///     expectationFailed: The server cannot meet the requirements of the Expect request-header field.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeExpectationFailed = 417,
/// <ul>
///   <li>
///     teapot: This HTTP status is used as an Easter egg in some websites.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeTeapot = 418,
/// <ul>
///   <li>
///     misdirectedRequest: The request was directed at a server that is not able to produce a response.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeMisdirectedRequest = 421,
/// <ul>
///   <li>
///     unprocessableEntity: The request was well-formed but was unable to be followed due to semantic errors.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeUnprocessableEntity = 422,
/// <ul>
///   <li>
///     locked: The resource that is being accessed is locked.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeLocked = 423,
/// <ul>
///   <li>
///     failedDependency: The request failed due to failure of a previous request (e.g., a PROPPATCH).
///   </li>
/// </ul>
  EKYCHTTPStatusCodeFailedDependency = 424,
/// <ul>
///   <li>
///     upgradeRequired: The client should switch to a different protocol such as TLS/1.0, given in the Upgrade header field.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeUpgradeRequired = 426,
/// <ul>
///   <li>
///     preconditionRequired: The origin server requires the request to be conditional.
///   </li>
/// </ul>
  EKYCHTTPStatusCodePreconditionRequired = 428,
/// <ul>
///   <li>
///     tooManyRequests: The user has sent too many requests in a given amount of time.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeTooManyRequests = 429,
/// <ul>
///   <li>
///     requestHeaderFieldsTooLarge: The server is unwilling to process the request because either an individual header field, or all the header fields collectively, are too large.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeRequestHeaderFieldsTooLarge = 431,
/// <ul>
///   <li>
///     noResponse: Used to indicate that the server has returned no information to the client and closed the connection.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeNoResponse = 444,
/// <ul>
///   <li>
///     unavailableForLegalReasons: A server operator has received a legal demand to deny access to a resource or to a set of resources that includes the requested resource.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeUnavailableForLegalReasons = 451,
/// <ul>
///   <li>
///     SSLCertificateError: An expansion of the 400 Bad Request response code, used when the client has provided an invalid client certificate.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeSSLCertificateError = 495,
/// <ul>
///   <li>
///     SSLCertificateRequired: An expansion of the 400 Bad Request response code, used when a client certificate is required but not provided.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeSSLCertificateRequired = 496,
/// <ul>
///   <li>
///     HTTPRequestSentToHTTPSPort: An expansion of the 400 Bad Request response code, used when the client has made a HTTP request to a port listening for HTTPS requests.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeHTTPRequestSentToHTTPSPort = 497,
/// <ul>
///   <li>
///     clientClosedRequest: Used when the client has closed the request before the server could send a response.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeClientClosedRequest = 499,
/// <ul>
///   <li>
///     internalServerError: A generic error message, given when an unexpected condition was encountered and no more specific message is suitable.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeInternalServerError = 500,
/// <ul>
///   <li>
///     notImplemented: The server either does not recognize the request method, or it lacks the ability to fulfill the request.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeNotImplemented = 501,
/// <ul>
///   <li>
///     badGateway: The server was acting as a gateway or proxy and received an invalid response from the upstream server.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeBadGateway = 502,
/// <ul>
///   <li>
///     serviceUnavailable: The server is currently unavailable (because it is overloaded or down for maintenance). Generally, this is a temporary state.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeServiceUnavailable = 503,
/// <ul>
///   <li>
///     gatewayTimeout: The server was acting as a gateway or proxy and did not receive a timely response from the upstream server.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeGatewayTimeout = 504,
/// <ul>
///   <li>
///     HTTPVersionNotSupported: The server does not support the HTTP protocol version used in the request.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeHTTPVersionNotSupported = 505,
/// <ul>
///   <li>
///     variantAlsoNegotiates: Transparent content negotiation for the request results in a circular reference.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeVariantAlsoNegotiates = 506,
/// <ul>
///   <li>
///     insufficientStorage: The server is unable to store the representation needed to complete the request.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeInsufficientStorage = 507,
/// <ul>
///   <li>
///     loopDetected: The server detected an infinite loop while processing the request.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeLoopDetected = 508,
/// <ul>
///   <li>
///     notExtended: Further extensions to the request are required for the server to fulfill it.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeNotExtended = 510,
/// <ul>
///   <li>
///     networkAuthenticationRequired: The client needs to authenticate to gain network access.
///   </li>
/// </ul>
  EKYCHTTPStatusCodeNetworkAuthenticationRequired = 511,
};
static NSString * _Nonnull const EKYCHTTPStatusCodeDomain = @"FEKYC.EKYCHTTPStatusCode";

@protocol FEKYCDelegate;

SWIFT_CLASS("_TtC5FEKYC5FEKYC")
@interface FEKYC : NSObject
+ (FEKYC * _Nonnull)instance SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, weak) id <FEKYCDelegate> _Nullable delegate;
+ (void)config;
- (void)start;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP5FEKYC13FEKYCDelegate_")
@protocol FEKYCDelegate
- (void)didEKYCSuccessWithSessionId:(NSString * _Nonnull)sessionId;
@end
















#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
